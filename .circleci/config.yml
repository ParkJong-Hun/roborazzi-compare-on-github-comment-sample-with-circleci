version: 2.1

orbs:
  android: circleci/android@2.3.0
  gh: circleci/github-cli@2.3.0

machines:
  android: &android
    executor:
      name: android/android-docker
      resource-class: large
      tag: 2023.11.1

commands:
  gradle:
    parameters:
      title:
        type: string
      task:
        type: string
      # write whatever you want
      options:
        default: --no-daemon
        type: string
      # DO NOT TOUCH THIS
      default-vrt-option:
        default: -Proborazzi.test.compare=true
        type: string
      vrt-option:
        type: string
    steps:
      - run:
          name: <<parameters.title>>
          command: |
            ./gradlew <<parameters.task>> <<parameters.options>> <<parameters.default-vrt-option>> <<parameters.vrt-option>>

  check_is_pr:
    steps:
      - run:
          name: Check if it is a PR
          command: |
            is_pr=false
            if [ -n "$CIRCLE_PULL_REQUEST" ]; then
              is_pr=true
            fi
            echo "Is this build Pull Request: $is_pr"
            echo "export IS_PR=$is_pr" >> $BASH_ENV

  determine_compare_screenshots:
    steps:
      - run:
          name: Determine compare screenshots
          command: |
            if [ $IS_PR = "true" ]; then
              echo "This is a Pull Request build"
              extra_unit_test_options="-Proborazzi.test.compare=true"
            else
              echo "This is not a Pull Request build"
              extra_unit_test_options=""
            fi
            echo "options: $extra_unit_test_options"
            echo "export EXTRA_UNIT_TEST_OPTIONS=${extra_unit_test_options}" >> $BASH_ENV

  import_artifact:
    steps:
      - run:
          name: Save Base branch name to env
          command: |
            pr=$(echo https://api.github.com/repos/${CIRCLE_PULL_REQUEST:19} | sed "s/\/pull\//\/pulls\//")
            echo "Pull Request: $pr"
            base_branch_name=$(curl -s -H "Authorization: token ${GITHUB_BOT_ACCESS_TOKEN}" $pr | jq '.base.ref')
            echo "Base branch: $base_branch_name"
            echo "export BASE_BRANCH_NAME=${base_branch_name}" >> $BASH_ENV
      - run:
          name: Save Artifact existing state to env
          command: |
            is_artifact_exist=false
            if [ $IS_PR = "true" ]; then
              is_artifact_exist=$(echo -n "$(git fetch origin artifact_$BASE_BRANCH_NAME && echo true || echo false)")
            fi
            echo "Is artifact exist: $is_artifact_exist"
            echo "export IS_ARTIFACT_EXIST=${is_artifact_exist}" >> $BASH_ENV
      - run:
          name: Checkout artifact branch
          command: |
            if [ $IS_ARTIFACT_EXIST = "true" ]; then
              git fetch origin artifact_$BASE_BRANCH_NAME
              git checkout artifact_$BASE_BRANCH_NAME
              echo "Current branch: $(git branch --show-current)"
            fi
      - run:
          name: Save artifact's timestamp to env
          command: |
            if [ $IS_ARTIFACT_EXIST = "false" ]; then
              echo "no-op" > timestamp
            fi
            echo "Artifact Timestamp: $(cat timestamp)"
            echo "export ARTIFACT_TIMESTAMP=$(echo -n $(cat timestamp))" >> $BASH_ENV
      - run:
          name: Zip artifact
          command: |
            if [ $IS_ARTIFACT_EXIST = "true" ]; then
              mkdir -p ./temp/zip
              touch artifact.zip
              find . -type f -path "*/build/outputs/roborazzi/*" -exec zip -r ./temp/zip/artifact.zip {} +
              echo "Zipped artifact: $(ls ./temp/zip)"
            fi
      - save_cache:
          paths:
            - ./temp/zip
          key: artifact-{{ checksum "timestamp" }}
      - run:
          name: Checkout Head branch
          command: git checkout $CIRCLE_BRANCH
      - run:
          name: Restore Artifact timestamp file
          command: echo $ARTIFACT_TIMESTAMP > timestamp
      - restore_cache:
          key: artifact-{{ checksum "timestamp" }}
      - run:
          name: Unzip artifact
          command: |
            if [ $IS_ARTIFACT_EXIST = "true" ]; then
              unzip ./temp/zip/artifact.zip || true
              rm -rf ./temp || true
            fi
            echo "app/build/outputs/roborazzi: $(ls ./app/build/outputs/roborazzi)"

  # TODO: Do not ignore commit history of existing artifact branch.
  # but, if it occurs conflict, completely ignore the contents of the previous commit and replace it with the new commit.
  export_artifact_as_branch:
    steps:
      - set_git_config
      - run:
          name: Export recorded screenshots
          command: |
            git push origin --delete artifact_$CIRCLE_BRANCH || true
            
            git checkout --orphan artifact_$CIRCLE_BRANCH
            git rm --cached -rf .
            
            add_files=$(find . -type f -path "*/build/outputs/roborazzi/*" ! -name "*.compare.png")
            for file in $add_files; do
              git add -f $file
            done
            
            echo $(date +%s) > timestamp
            git add -f timestamp
            
            echo -e "version: 2.1\njobs:\n no-op:\n  machine: true\n  steps:\n  - run: no-op\nworkflows:\n build:\n  jobs:\n   - no-op:\n      filters:\n       branches:\n        only: no-op" > .circleci/config.yml
            git add -f .circleci/config.yml
            
            git commit -m "Store screenshots for $CIRCLE_BRANCH"
            git push origin HEAD:artifact_$CIRCLE_BRANCH -f

  export_comparison_as_branch:
    steps:
      - set_git_config
      - run:
          name: Push compare branch
          command: |
            if [ $IS_PR = "true" ]; then
              echo "Current branch: $(git branch --show-current)"
              git push origin --delete comparison_$CIRCLE_BRANCH || true
            
              fileSize=$(echo $(find . -type f -path "*/build/outputs/roborazzi/*" -name "*_compare.png" | wc -l | sed -e 's/ //g'))
              echo "Detected Comparison outputs size: $fileSize"
              if [ $fileSize -ne 0 ]; then
                git checkout --orphan comparison_$CIRCLE_BRANCH
                git rm --cached -rf .
            
                add_files=$(find . -type f -path "*/build/outputs/roborazzi/*" -name "*_compare.png")
                for file in $add_files; do
                  git add -f $file
                done
            
                echo -e "version: 2.1\njobs:\n no-op:\n  machine: true\n  steps:\n  - run: no-op\nworkflows:\n build:\n  jobs:\n   - no-op:\n      filters:\n       branches:\n        only: no-op" > .circleci/config.yml
                git add .circleci/config.yml
            
                git commit -m "Screenshot difference between ${CIRCLE_BRANCH}(head) and ${BASE_BRANCH_NAME}(base)"
                git clean -df
                git push origin HEAD:comparison_$CIRCLE_BRANCH -f
              fi
            fi

  set_git_config:
    steps:
      - run:
          name: Set git config
          # Set github account for comment as environment variables.
          command: |
            git config --global user.name "$GITHUB_BOT_NAME"
            git config --global user.email "$GITHUB_BOT_EMAIL"

  comment_screenshots_diff:
    steps:
      - gh/install
      - run:
          name: Sign in Github
          command: echo "$GITHUB_BOT_ACCESS_TOKEN" | gh auth login --with-token
      - run:
          name: Create comment
          command: |
            files=$(find . -type f -path "*/build/outputs/roborazzi/*" -name "*_compare.png")
            if [ -n "$files" ]; then
              echo "### Snapshot diff report vs $BASE_BRANCH_NAME" > comment
              echo "| File name | Image |" >> comment
              echo "|-------|-------|" >> comment
              for file in $files; do
                fileName=$(basename "$file" | sed -r 's/(.{20})/\1<br>/g')
                echo "| [$fileName](https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/blob/comparison_$CIRCLE_BRANCH/$file) | ![](https://github.com/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/blob/comparison_$CIRCLE_BRANCH/$file?raw=true) |" >> comment
              done
            else
              echo "### Snapshot diff report vs $BASE_BRANCH_NAME" > comment
              echo "There is no screenshot change exist in this pull request !" >> comment
            fi
      - run:
          name: Comment screenshots diff
          command: |
            if [ $IS_PR = "true" ]; then
              prNumber=$(echo $CIRCLE_PULL_REQUEST | sed "s:.*/::")
              url="https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/${prNumber}/comments"
              commentIds=$(echo -n $(curl -s -H "Authorization: token $GITHUB_BOT_ACCESS_TOKEN" $url -v | jq '.[] | select(.body | test("^### Snapshot diff report.*")) | .id'))
              failedComment="$(echo -e "### Snapshot diff report vs $BASE_BRANCH_NAME\n:warning: **Failed to show Snapshot diff**\n$CIRCLE_BUILD_URL")"
            
              if [ -n "$commentIds" ]; then
                for commentId in $commentIds; do
                  comment="$(cat ./comment)"
                  endpoint="/repos/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/issues/comments/$commentId"
                  gh api --method DELETE -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $endpoint ||
                  gh api --method PATCH -H "Accept: application/vnd.github+json" -H "X-GitHub-Api-Version: 2022-11-28" $endpoint -f body="$failedComment"
                done
              fi
            
              gh pr comment "$CIRCLE_PULL_REQUEST" -F ./comment || gh pr comment "$CIRCLE_PULL_REQUEST" -b "$failedComment"
            fi

  cleanup_branches:
    parameters:
      prefix:
        type: string
      maximum_seconds_past:
        type: integer
        default: 1209600 # 14 days (industry standard agile sprint)
    steps:
      - run:
          name: Cleanup branches
          command: |
            git branch -r --format="%(refname:lstrip=3)" | grep << parameters.prefix >> | while read -r branch; do
              last_commit_date_timestamp=$(git log -1 --format=%ct "origin/$branch")
              now_timestamp=$(date +%s)
              if [ $((now_timestamp - last_commit_date_timestamp)) -gt << parameters.maximum_seconds_past >> ]; then
                git push origin --delete "$branch"
                echo "Deleted branch: $branch"
              fi
            done || true

jobs:
  # for getting the base branch name
  sleep:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Sleep
          command: |
            echo "Sleeping for 1 minute, create pr if you want"
            sleep 60s

  unit_test:
    <<: *android
    steps:
      - checkout
      - check_is_pr
      - determine_compare_screenshots
      # TODO: check mode (artifact as branch, artifact as circle ci's artifact)
      - import_artifact
      - gradle:
          title: Unit test
          task: testDebugUnitTest
          vrt-option: $EXTRA_UNIT_TEST_OPTIONS
      - export_artifact_as_branch
      - export_comparison_as_branch
      - comment_screenshots_diff
      - cleanup_branches:
          prefix: artifact_
      - cleanup_branches:
          prefix: comparison_

workflows:
  ci:
    jobs:
      - sleep
      - unit_test:
          requires:
            - sleep
          filters:
            branches:
              only:
                - main
                - develop
                - /release\/.*/
                - /feat\/.*/
                - /feature\/.*/
                - /fix\/.*/
                - /bugfix\/.*/